#include "lib.h"
#include <iostream>
#include <vector>
// 1. Создание объекта контейнера для хранения объектов типа int. 
// 2. Добавление в контейнер десяти элементов (0, 1 … 9). 
// 3. Вывод содержимого контейнера на экран. 
// Ожидаемый результат: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. 
// 4. Вывод размера контейнера на экран. 
// Ожидаемый результат: 10. 
// 5. Удаление третьего (по счёту), пятого и седьмого элементов. 
// 6. Вывод содержимого контейнера на экран. 
// Ожидаемый результат: 0, 1, 3, 5, 7, 8, 9. 
// 7. Добавление элемента 10 в начало контейнера. 
// 8. Вывод содержимого контейнера на экран. 
// 1 
// Ожидаемый результат: 10, 0, 1, 3, 5, 7, 8, 9. 
// 9. Добавление элемента 20 в середину контейнера. 
// 10.  Вывод содержимого контейнера на экран. 
// Ожидаемый результат: 10, 0, 1, 3, 20, 5, 7, 8, 9. 
// 11.  Добавление элемента 30 в конец контейнера. 
// 12.  Вывод содержимого контейнера на экран. 
// Ожидаемый результат: 10, 0, 1, 3, 20, 5, 7, 8, 9, 30. 
// Требования к минимальному интерфейсу: 
// • Метод/ы (может быть несколько) добавления элементов в конец 
// контейнера ( push_back ). 
// • Метод/ы вставки элементов в произвольную позицию ( insert ). 
// • Метод/ы удаления элементов из контейнера ( erase ). 
// • Метод получения текущего размера контейнера ( size ). 
// • Метод/ы получения доступа по индексу ( operator[] ).
template <typename T>
void printContainer(const T& container) {
    for (const auto& elem : container) {
        std::cout << elem << " ";
    }
    std::cout << std::endl;
}
int main () 
{
 setlocale(LC_ALL, "Ru");
 std::vector<int> vec {0, 1, 2, 3 , 4, 5, 6, 7, 8, 9, };
 std::cout << "Векторы: ";
 printContainer(vec);

 std::cout<< sizeof(vec)<< std::endl;



}
